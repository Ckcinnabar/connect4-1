# -*- coding: utf-8 -*-
"""KC_Connect4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VGcy904DlyfWehybLwMbvxQCumTkYWwH

# Kuan Chen Chen Connect4
## Made by: 2024/9/23 12:03AM
## Project instruction:
### Playing Connect4 by enter the avalible input.If enter invalid input the program will tell you to enter the correct one, the program will also detect the win or tie, and the user can choose to end the game or repeat the game again and again.
"""

def printBoard(board):
    for row in board:
        print("|"+" | ".join(row)+" | ")
        print("-"*50)

# Draw the line of the board

def availablePosition(board):
  avaliable = False
  can_place = []
  for j in range(1,8):
    for i in range(5,-1,-1):
      if board[i][j] == "   ":
        can_place.append(f"{['a','b','c','d','e','f','g'][j-1]}{6-i}")
        avaliable = True
        break
  print(f"Available positions are: {can_place}")
  return can_place

# Print all the available position
# First we check by column, then we check which row is empty backward(from down to top), when we find a position then we add the position into can_place
# EX: we check column a, and a3 is "   ", then we put a3 into can place, then we loop this by a to g.

def checkFull(board):
    for i in range(6):
        for j in range(1,8):
            if board[i][j] == "   ":
                return False
    return True

# If the board is full means that there is no empty("   ") in the board, so if theres no "   " in te board we says that tke board is full

def checkWin(board, turn):
    for i in range(6):
      for j in range(1, 5):
        if board[i][j] == board[i][j+1] == board[i][j+2] == board[i][j+3] == f" {turn} ":
          return True
          # We check the same column

    for i in range(3):
      for j in range(1, 8):
        if board[i][j] == board[i+1][j] == board[i+2][j] == board[i+3][j] == f" {turn} ":
          return True
          # We check the same row

    for i in range(3):
      for j in range(1, 5):
        if board[i][j] == board[i+1][j+1] == board[i+2][j+2] == board[i+3][j+3] == f" {turn} ":
          return True
          # We check the diagonal from top-left to bottom-right

    for i in range(3, 6):
      for j in range(1, 5):
        if board[i][j] == board[i-1][j+1] == board[i-2][j+2] == board[i-3][j+3] == f" {turn} ":
          return True
          # We check the diagonal from top-right to bottom-left

    return False
    # If no win condition is met, return False

def main():
  board = [ ["  6 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        ["  5 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        ["  4 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        ["  3 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        ["  2 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        ["  1 ","   ", "   ", "   ", "   ","   ", "   ", "   "],
        [" R/C"," a ", " b ", " c ", " d "," e ", " f ", " g "],]
  # We have to make a board at first, and each time we repeat the game, the board will renew itself

  print("New game: X goes first.\n")
  turn = "X"
  can_place=[]
  printBoard(board)
  print(" ")

  while True:
    print(f"{turn}'s turn.")
    print(f"Where do you want your {turn} placed?")
    can_place=availablePosition(board)
    can_place # print where we can place
    print(" ")

    while True:
      theinput = input("Please enter column-letter and row-number (e.g., a1): ")
      if theinput not in can_place:
        print(f"Invalid input. Please choose from available positions: {can_place}")
        # If the input is in can_place mean that the input is valid
        # If the input is not in can_place means that the input is Invalid(1. not in the board 2. already have element inside. 3.Shouldn't placed at that position)

      else:
        break

    print("Thank you for your selection.")
    col = ord(theinput[0]) - ord('a')+1
    row = 6 - int(theinput[1:])
    # Convert user input to board coordinates
    # We change the letter into number, and plus one, because a is 0
    # We count change the row from upward into downward

    board[row][col] = f" {turn} "
    # Replace the "   " into X/O


    if checkWin(board, turn) == True:
      print(f"{turn} IS THE WINNER!!!\n")
      printBoard(board)
      break
      # We check the win first, because theres might be case that after the last placed, the board is full and X/O wins the game
      # So if we check the win first, if theres a win then the code will break the loop.

    if checkFull(board) == True:
      print("It's a tie!\n")
      printBoard(board)
      break


    printBoard(board)
    turn = 'X' if turn == 'O' else 'O'
    # Change the turn

repeat = 'yes'
while repeat[0].lower() == 'y':
  main()
  repeat = input("\nAnother game(y/n)?.\n")
  # The repeat of the game.

print("Thank you for playing!")

